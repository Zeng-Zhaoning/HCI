{"remainingRequest":"C:\\Users\\Zhaoning\\Desktop\\HCI\\node_modules\\vue-loader-v16\\dist\\index.js??ref--0-1!C:\\Users\\Zhaoning\\Desktop\\HCI\\src\\components\\TypesetGraph.vue?vue&type=style&index=0&id=0703b876&scoped=true&lang=css","dependencies":[{"path":"C:\\Users\\Zhaoning\\Desktop\\HCI\\src\\components\\TypesetGraph.vue","mtime":1640105321369},{"path":"C:\\Users\\Zhaoning\\Desktop\\HCI\\node_modules\\css-loader\\dist\\cjs.js","mtime":1639148472114},{"path":"C:\\Users\\Zhaoning\\Desktop\\HCI\\node_modules\\vue-loader-v16\\dist\\stylePostLoader.js","mtime":1639551855758},{"path":"C:\\Users\\Zhaoning\\Desktop\\HCI\\node_modules\\postcss-loader\\src\\index.js","mtime":1639148483475},{"path":"C:\\Users\\Zhaoning\\Desktop\\HCI\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1639148470021},{"path":"C:\\Users\\Zhaoning\\Desktop\\HCI\\node_modules\\vue-loader-v16\\dist\\index.js","mtime":1639551855693}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiN0eXBlc2V0LWdyYXBoewogIHdpZHRoOiAxMDAlOwogIGhlaWdodDogMTAwJTsKfQoudHlwZXNldC1lZGl0LXBhbmVsLWJveHsKICBwb3NpdGlvbjogZml4ZWQ7CiAgcmlnaHQ6IDVweDsKICB0b3A6IDElOwogIHotaW5kZXg6IDEwMDsKfQo="},{"version":3,"sources":["C:\\Users\\Zhaoning\\Desktop\\HCI\\src\\components\\TypesetGraph.vue"],"names":[],"mappings":";AA0hBA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACZ,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;EACX,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;AACd;AACA,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;EACrB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC;EACf,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;EACV,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;EACP,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;AACd","file":"C:/Users/Zhaoning/Desktop/HCI/src/components/TypesetGraph.vue","sourceRoot":"","sourcesContent":["<template>\n  <div class=\"typeset-edit-panel-box\">\n    <edit-bar-block block-name=\"操作\">\n      <div class=\"operations\">\n        <op-item op-name=\"水平对齐\" icon=\"#iconalign-vertical\" @click=\"align('horizontal')\"></op-item>\n        <op-item op-name=\"垂直对齐\" icon=\"#iconalign-level\" @click=\"align('vertical')\"></op-item>\n        <op-item op-name=\"导出\" icon=\"#iconshare\" @click=\"exportPng(typeset_cy)\"></op-item>\n      </div>\n    </edit-bar-block>\n  </div>\n  <div id=\"typeset-graph\"></div>\n</template>\n\n<script>\nimport cytoscape from 'cytoscape';\nimport compoundDragAndDrop from 'cytoscape-compound-drag-and-drop';\nimport fcose from 'cytoscape-fcose';\nimport {mapGetters, mapMutations, mapState} from \"vuex\";\nimport $ from \"jquery\";\nimport axios from \"axios\";\nimport tippy, {sticky} from \"tippy.js\";\nimport EditBarBlock from \"@/components/EditBar/EditBarBlock\";\nimport OpItem from \"@/components/EditBar/OpItem\";\n\ncytoscape.use(compoundDragAndDrop);\ncytoscape.use( fcose );\n\nexport default {\n  name: \"TypesetGraph\",\n  components:{EditBarBlock,OpItem},\n  data(){\n    return{\n      cdnd: null, //拖拽工具句柄\n      typeset_cy: null,  //cy句柄\n      fcose_options: {\n        name: 'fcose',\n        quality: \"proof\",\n        randomize: false,\n        animationDuration: 250,\n        fit: false,\n        alignmentConstraint: {\n          vertical: [],\n          horizontal: [],\n        },\n      }, //fcose布局选项\n    }\n  },\n  computed:{\n    ...mapState({\n      cy: state => state.workspace.cy,\n      nodeFontSize: state => state.workspace.nodeFontSize,\n      nodeRadius: state => state.workspace.nodeRadius,\n      defaultStyle: state => state.workspace.defaultStyle,\n      shapeType: state => state.workspace.shapeType,\n      nodeType: state => state.workspace.nodeType,\n      edgeType: state => state.workspace.edgeType,\n      lineStyleType: state => state.workspace.lineStyleType,\n      project: state => state.project,\n    }),\n  },\n  mounted() {\n    let data = {\n      edges: JSON.parse(JSON.stringify(this.project.edges)),\n      nodes: JSON.parse(JSON.stringify(this.project.nodes)),\n    };\n    this.dataHandle(data);\n  },\n  watch:{\n    // current_project_change(now, old){\n    //   console.log(\"current_project改动\")\n    //   let data = {\n    //     edges: JSON.parse(JSON.stringify(this.current_project.edges)),\n    //     nodes: JSON.parse(JSON.stringify(this.current_project.nodes)),\n    //   };\n    //   this.dataHandle(data);\n    // }\n  },\n  methods: {\n    getDataJsonObject(cy) {\n      let eles = JSON.parse(JSON.stringify(cy.json().elements));\n      let obj = {\"edges\": [], \"nodes\": []};\n      if (JSON.stringify(eles) !== '{}') {\n        if (eles.edges !== undefined && eles.edges.length > 0) {\n          eles.edges.forEach(val => {\n            obj.edges.push({\n              data: val.data\n            });\n          });\n        }\n        if (eles.nodes !== undefined && eles.nodes.length > 0) {\n          eles.nodes.forEach(val => {\n            obj.nodes.push({\n              data: val.data,\n              position: val.position\n            });\n          });\n        }\n      }\n      return obj;\n    },\n\n    //最后去掉\n    //读数据，然后交给dataHandle\n    getData(url) {\n      axios.get(url)\n          .then(res => {\n            this.dataHandle(res.data);\n          })\n          .catch(err => {\n            console.error(err);\n            this.$message.error('文件数据格式不正确');\n          })\n    },\n\n    //在data中存数据，并进行数据展示的预处理\n    dataHandle(data) {\n      data.edges.forEach((val) => {\n        val.classes = 'autorotate';\n        val.data.type = val.data.type || 'default';\n      })\n      let default_color = \"#9c8f96\";//和add-node方法中初始化颜色耦合，必须同时修改\n      data.nodes.forEach((val) => {\n        val.data.type = val.data.type || 'default';\n        val.data.color = val.data.color || default_color;//将颜色绑定在数据里，在workspace中修改为background-color:data(color),实现颜色持久化\n        // val.position.x = val.data.typeset.x === -1? val.position.x : val.data.typeset.x;\n        // val.position.y = val.data.typeset.y === -1? val.position.y : val.data.typeset.y;\n      })\n      let that = this;\n      const loading = this.$loading({\n        lock: true,\n        text: '...加载中...',\n        spinner: 'el-icon-loading',\n        background: 'rgba(255, 255,255, 0.8)'\n      });\n      try{\n        this.graph(that, data);\n      }finally{\n        this.$nextTick(() => {\n          loading.close();\n        });\n      }\n    },\n\n    //让过长的内容作为展示的标题时省略\n    fontShow(text) {\n      if (text && text.length > 5) {\n        return text.substring(0, 4) + \"...\"\n      }\n      return text\n    },\n\n    //根据内容设置字体大小，使之不会超出节点（未验证）\n    //最好改成根据节点大小设置字体大小\n    fontStyle(length,width) {\n      if(this.nodeFontSize!==''){\n        return {\n          \"font-size\": this.nodeFontSize + \"px\"\n        };\n      }\n      let defaultWidth = 30;\n      let minWidth = 19;\n      let fontSize = defaultWidth - (length - 2) * 6;//这个计算字体大小的算式可能有点拉胯，\n      //根据节点大小调整文字大小\n      let nodeWidth = width?width:defaultWidth;\n      fontSize = fontSize*nodeWidth/defaultWidth;\n      if (!fontSize || fontSize < minWidth) {//\"!fontSize\"有效吗，不懂诶\n        fontSize = minWidth;\n      }\n      return {\n        \"font-size\": fontSize + \"px\"\n      };\n    },\n\n    //帮助node合适地展示text\n    rendNode(target, that) {\n      let data = target.data();\n      const text = that.fontShow(data.name)\n\n      //如果没有设定大小，就按照节点本身大小（节点大小不是时刻是设定大小吗？按现在的写法，我觉得新增的节点没有初始化到渲染到设定大小）\n      let widthNow = this.nodeRadius===''?this.getNodeWidth(target):this.nodeRadius;\n\n      widthNow = parseInt(widthNow+'');//确保是数字类型\n      //获取节点宽度的数字值来调节字体大小\n      let style;\n      if (text !== undefined){\n        style = that.fontStyle(text.length,widthNow);\n      }else{\n        style = that.fontStyle(0, widthNow);\n      }\n\n      style.shape = this.shapeType[data.type];\n      style.label = text;\n      if(this.nodeRadius!==''){//和EditBar中nodeRadius监听方法逻辑耦合，必须同时修改\n        style.width = widthNow+'px';\n        style.height = widthNow+'px';\n      }\n      target.style(style);\n    },\n\n    getNodeWidth(target){//返回值为数字类型\n      let widthProp = target.style(\"width\");\n      let defaultWidth = 30;\n      if(widthProp){\n        return parseInt(widthProp.match(/(\\S*)px/)[1]);//随便搜的，不知道有没有更好写法\n      }else{\n        return defaultWidth;\n      }\n    },\n\n    rendEdge(target,that){\n      let data = target.data();\n      const text = that.fontShow(data.relation);\n      target.style({label:text,'line-style':this.lineStyleType[data.type]});\n    },\n\n    graph(that, data) {\n      let presetLayout = {\n        name: 'preset',\n\n        positions: undefined, // map of (node id) => (position obj); or function(node){ return somPos; }\n        zoom: undefined, // the zoom level to set (prob want fit = false if set)\n        pan: undefined, // the pan level to set (prob want fit = false if set)\n        fit: true, // whether to fit to viewport\n        padding: 30, // padding on fit\n        animate: false, // whether to transition the node positions\n        animationDuration: 500, // duration of animation in ms if enabled\n        animationEasing: undefined, // easing of animation if enabled\n        animateFilter: function ( node, i ){ return true; }, // a function that determines whether the node should be animated.  All nodes animated by default on animate enabled.  Non-animated nodes are positioned immediately when the layout starts\n        ready: undefined, // callback on layoutready\n        stop: undefined, // callback on layoutstop\n        transform: function (node, position ){ return position; } // transform a given node position. Useful for changing flow direction in discrete layouts\n      };\n      let cy = cytoscape({\n        container: $('#typeset-graph'),\n        boxSelectionEnabled: false,\n        autounselectify: false,\n        style: this.defaultStyle,\n        elements: data,\n        hideLabelsOnViewPort: false,\n        minZoom: 0.15,\n        maxZoom: 8,\n        wheelSensitivity: 0.1,   //warning\n        layout: presetLayout\n      });\n      that.typeset_cy = cy;\n\n      const options = {\n        newParentNode: (grabbedNode, dropSibling) => ({}), // specifies element json for parent nodes added by dropping an orphan node on another orphan (a drop sibling)\n        overThreshold: 20, // make dragging over a drop target easier by expanding the hit area by this amount on all sides\n        outThreshold: 50 // make dragging out of a drop target a bit harder by expanding the hit area by this amount on all sides\n      };\n      that.cdnd = cy.compoundDragAndDrop(options);\n\n\n      this.batch(cy,()=>{\n        cy.nodes().forEach(val => {\n          that.rendNode(val, that);\n        });\n\n        cy.edges().forEach(val => {\n          that.rendEdge(val, that);\n        });\n      });\n\n\n      cy.on('mouseover', 'node', event => {\n        let target = event.target || event.cyTarget;\n        // console.log(\"mouseover node: \",target);\n        let data = target.data();\n        const minSize = 48;//看起来可以的试验值，无特殊意义\n        let fontSize = parseInt(target.style(\"font-size\").match(/(\\S*)px/)[1])*1.2;\n        fontSize = fontSize<minSize?minSize:fontSize;\n        target.style({label:data.name,fontSize: fontSize,'z-index':9999});\n        if(!target.scratch('tip')){\n          const typeItem = this.nodeType.find((item) => item.value === data.type);\n          const typeText = typeItem ? typeItem.label : '其他';\n          let text = \"类型: \"+ typeText +'<br/>'+\"属性: \" +'<br/>' + this.property2String(data.property)\n          target.scratch('tip',that.makeTippy(target,text));\n        }\n        target.scratch('tip').show();\n      })\n          .on('mouseout', 'node', event => {\n            let target = event.target || event.cyTarget;\n            that.rendNode(target, that);\n            if(target.scratch('tip')){\n              target.scratch('tip').destroy();\n              target.removeScratch('tip');\n              // console.log(target.scratch());\n            }\n            target.style({'z-index':0});\n          })\n          //edge不能改变边的颜色，否则和选中机制冲突（那处也会改变颜色）\n          .on('mouseover', 'edge', event => {\n            let target = event.target || event.cyTarget;\n            // console.log(\"mouseover edge: \",target);\n            let data = target.data();\n            //如果要改旋转，是\"edge-text-rotation\": \"none\"和\"edge-text-rotation\": \"autorotate\"\n            target.style({label:data.relation,fontSize: 36, width: 6, color: '#bc5f6a','z-index':9999});//此数无意义，仅仅需要比rendNode最大label的36更大即可\n            if(!target.scratch('tip')){\n              const typeItem = this.edgeType.find((item) => item.value === data.type);\n              const typeText = typeItem ? typeItem.label : '其他';\n              let text = \"类型: \"+ typeText;\n              target.scratch('tip',that.makeTippy(target,text));\n            }\n            target.scratch('tip').show();\n          })\n          .on('mouseout', 'edge', event => {\n            let target = event.target || event.cyTarget;\n            that.rendEdge(target,that);\n            target.style({fontSize: 24, width: 3, color: '#e3a6a1','z-index':0});//与上文edge的初始配置保持一致\n            if(target.scratch('tip')){\n              target.scratch('tip').destroy();\n              target.removeScratch('tip');\n            }\n          })\n          .on('tap', 'node', event => {\n            let target = event.target || event.cyTarget;\n            let descendants = target.descendants();\n            if (descendants.length > 0){\n              descendants.select();\n              // target.unselect();无效\n            }\n          });\n\n      let contextMenu = cy.contextMenus({\n        menuItems: [\n          {\n            id: 'color-red',\n            content: '红',\n            selector: 'node',\n            onClickFunction: function (event) {\n              let target = event.target || event.cyTarget;\n              let color = '#e89d96'\n              if (target.descendants().length === 0){\n                target.data('color', color);\n              }else{\n                target.style({\n                  'border-color': color,\n                  'background-color': color,\n                });\n              }\n            },\n          },\n          {\n            id: 'color-yellow',\n            content: '黄',\n            selector: 'node',\n            onClickFunction: function (event) {\n              let target = event.target || event.cyTarget;\n              let color = '#ebc57c'\n              if (target.descendants().length === 0){\n                target.data('color', color);\n              }else{\n                target.style({\n                  'border-color': color,\n                  'background-color': color,\n                });\n              }\n            },\n          },\n          {\n            id: 'color-light-blue',\n            content: '浅蓝',\n            selector: 'node',\n            onClickFunction: function (event) {\n              let target = event.target || event.cyTarget;\n              let color = '#81c7e0'\n              if (target.descendants().length === 0){\n                target.data('color', 'lightblue');\n              }else{\n                target.style({\n                  'border-color': color,\n                  'background-color': color,\n                });\n              }\n            },\n          },\n          {\n            id: 'color-blue-slate',\n            content: '靛青',\n            selector: 'node',\n            onClickFunction: function (event) {\n              let target = event.target || event.cyTarget;\n              let color = '#6a85ce'\n              if (target.descendants().length === 0){\n                target.data('color', color);\n              }else{\n                target.style({\n                  'border-color': color,\n                  'background-color': color,\n                });\n              }\n            }\n          },\n          {\n            id: 'color-brown',\n            content: '棕',\n            selector: 'node',\n            onClickFunction: function (event) {\n              let target = event.target || event.cyTarget;\n              let color = '#9c8f96'\n              if (target.descendants().length === 0){\n                target.data('color', color);\n              }else{\n                target.style({\n                  'border-color': color,\n                  'background-color': color,\n                });\n              }\n            },\n          },\n        ],\n      });\n    },\n\n    // **Allow for manipulation of elements without triggering multiple style calculations or multiple redraws.**\n    batch(cy,func){\n      cy.startBatch();\n      func();\n      cy.endBatch();\n    },\n\n    makeTippy(ele, text){//ele需传入cy的ele\n      var ref = ele.popperRef();\n\n      // Since tippy constructor requires DOM element/elements, create a placeholder\n      var dummyDomEle = document.createElement('div');\n\n      var tip = tippy( dummyDomEle, {\n        getReferenceClientRect: ref.getBoundingClientRect,\n        trigger: 'manual', // mandatory\n        // dom element inside the tippy:\n        content: function(){ // function can be better for performance\n          var div = document.createElement('div');\n\n          div.innerHTML = text;\n\n          return div;\n        },\n        // your own preferences:\n        arrow: true,\n        placement: 'bottom',\n        offset: [20, 30],\n        hideOnClick: false,\n        // enable it\n        // sticky: true,\n        // only check the \"reference\" rect for changes\n        sticky: 'reference',\n        // only check the \"popper\" rect for changes\n        // sticky: 'popper',\n        plugins: [sticky],\n        zIndex: 10,//默认9999，修改小些避免遮住弹窗\n\n\n        // if interactive:\n        interactive: true,\n        appendTo: document.body // or append dummyDomEle to document.body\n      } );\n\n      return tip;\n    },\n\n    exportPng(cy){\n      this.$message.success(\"正在导出图片...\");\n      let blob = cy.png({\n        output: 'blob-promise', bg: 'white',\n        full: true, scale: 4\n      });\n      blob.then(res => {\n        //创建下载链接\n        let aLink = document.createElement('a');\n        aLink.download = this.generateFileName() + '.png';\n        let url = window.URL.createObjectURL(res);\n        aLink.href = url;\n\n        //创建、分配并触发点击事件\n        let evt = document.createEvent(\"MouseEvents\");\n        evt.initEvent(\"click\", true, true);\n        aLink.dispatchEvent(evt);\n\n        // 释放掉blob对象\n        window.URL.revokeObjectURL(url);\n      }).catch(err => {\n        console.log(\"Error occured: \", err);\n        if (cy.elements().length === 0) {\n          this.$message.error(\"知识图谱已经空啦，导不出东西的呀\");\n        }\n      });\n    },\n\n    generateFileName(){\n      let name = \"\";\n      try{\n        name = this.current_project.project_name;\n      }catch (e) {\n        console.log(\"Error occurs:\"+e);\n        console.log(\"可能未连接到Server\");\n        name = new Date().getTime();\n      }\n      return name + '-排版';\n    },\n\n    //对齐\n    align(direction){\n      let layout_constraint = this.fcose_options.alignmentConstraint[direction];\n      let nodes = this.typeset_cy.$('node:selected');\n      let node_ids = [];\n\n      for (let node of nodes){\n        if (node.descendants().length === 0){\n          let id = node.data('id');\n          node_ids.push(id);\n        }\n      }\n\n      try{\n        layout_constraint.push(node_ids);\n        nodes.layout(this.fcose_options).run();\n      }catch (err){\n        console.log(err)\n      }finally {\n        layout_constraint.pop();\n      }\n    },\n\n    // 把对象转化为字符串\n    property2String(props){\n      let result = '';\n      for(let key in props){\n        result += key + '-' + props[key] + '</br>';\n      }\n      return result;\n    }\n  }\n}\n</script>\n\n<style scoped>\n#typeset-graph{\n  width: 100%;\n  height: 100%;\n}\n.typeset-edit-panel-box{\n  position: fixed;\n  right: 5px;\n  top: 1%;\n  z-index: 100;\n}\n</style>"]}]}